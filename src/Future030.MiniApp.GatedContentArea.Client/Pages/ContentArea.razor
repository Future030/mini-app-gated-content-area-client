@page "/content/{Area}"
@using Future030.MiniApp.GatedContentArea.Client.Configuration
@using Future030.MiniApp.GatedContentArea.Client.Services
@using JetBrains.Annotations
@using Microsoft.Extensions.Options
@inject ILogger<ContentArea> Logger;
@inject IJSRuntime JSRuntime;
@inject IContentService ContentService;
@inject IOptions<BackendApiOptions> BackendApiOptions

<style>
    body {
        padding: 4px;
        text-align: center;
    }
    
    .content-gallery {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 1rem; /* Medium margin between items */
        margin-top: 1rem;
    }

    .content-gallery > img {
        width: 128px;         /* Set thumbnail width */
        height: 128px;        /* Set thumbnail height */
        object-fit: cover;    /* Scale and crop the image to fit within 128x128 */
        display: block;       /* Proper alignment */
        border-radius: 8px;   /* Optional: Rounded corners for a modern look */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Optional: Add some shadow */
    }

    .content-gallery > video {
        width: 128px;         /* Same rules applied for consistency */
        height: 128px;
        object-fit: cover;
    }
</style>

<h4>@Area</h4>

@if (!_isAuthenticated)
{
    <p>You are not logged in.</p>
}
else if (!_hasAccess)
{
    <p>You don't have the required token to access this content.</p>
}
else
{
    <div class="content-gallery">
        @foreach (var content in _contentItems)
        {
            // Build the fetch URL from OwnerUP/Area/FileName
            var secureUrl = GetSecureUrl(_connectionState!.OwnerAddress!, Area, content.FileName);

            if (content.MimeType.StartsWith("image/"))
            {
                <!--suppress RequiredAttributes -->
                <img
                    class="secure-content"
                    data-fetch-url="@secureUrl"
                    data-mime-type="@content.MimeType"
                    alt="Exclusive Image" />
            }
            else if (content.MimeType.StartsWith("video/"))
            {
                <video controls>
                    <!--suppress RequiredAttributes -->
                    <source
                        class="secure-content"
                        data-fetch-url="@secureUrl"
                        data-mime-type="@content.MimeType" />
                    Your browser does not support the video tag.
                </video>
            }
            else
            {
                <p>Unsupported content type: @content.MimeType</p>
            }
        }
    </div>
}

<footer style="margin-top: 2rem; font-size: 0.8rem; color: gray;">
    Want your own gated content area?
    <a href="@MailtoLink">Contact us</a>.
</footer>

@code {
    [Parameter] public string Area { get; set; } = string.Empty;
    
    private static readonly string ContactEmail = "hello@future030.com";
    private static readonly string MailSubject = Uri.EscapeDataString("Gated Content Area Request");
    private static readonly string MailBody = Uri.EscapeDataString(
        "Hi Future030 Team,\n\n" +
        "I am interested in setting up a gated content area. Please get in touch with me.\n\n" +
        "Best regards,\n[Your Name]"
    );

    private string MailtoLink => $"mailto:{ContactEmail}?subject={MailSubject}&body={MailBody}";

    private bool _isAuthenticated;
    private bool _hasAccess;
    private ConnectionState? _connectionState;
    private List<ContentItem> _contentItems = new();

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("upProviderInterop.initializeState",
            DotNetObjectReference.Create(this));
        await FetchAndVerifyConnectionState();
    }

    private async Task FetchAndVerifyConnectionState()
    {
        Logger.LogTrace("Fetching and verifying connection state for Area: {Area}", Area);
        try
        {
            Logger.LogInformation("üîπ Checking connection state...");

            _connectionState = await JSRuntime
                .InvokeAsync<ConnectionState>("upProviderInterop.getConnectionState");
            Logger.LogDebug("Connection state fetched: {@ConnectionState}", _connectionState);

            if (_connectionState == null ||
                string.IsNullOrEmpty(_connectionState.VisitorAddress) ||
                string.IsNullOrEmpty(_connectionState.OwnerAddress) ||
                !_connectionState.ChainId.HasValue)
            {
                _isAuthenticated = false;
                _hasAccess = false;
                Logger.LogWarning("‚ùå Missing connection state data: {@ConnectionState}", _connectionState);
                return;
            }

            _isAuthenticated = true;

            // üîπ Call GetGatedContentAsync and handle ApiResponse
            var response = await ContentService.GetGatedContentAsync(
                _connectionState.OwnerAddress,
                Area,
                _connectionState.VisitorAddress,
                Guid.NewGuid().ToString(), // Nonce
                "", // signature placeholder
                _connectionState.ChainId.Value
            );

            if (response is { IsSuccessStatusCode: true, Content: not null })
            {
                Logger.LogInformation("‚úÖ Access Granted. Loaded {Count} items", response.Content.Count);

                _contentItems = response.Content;
                _hasAccess = true;

                StateHasChanged();

                // Call TS to set the actual content src via fetch + blob
                await JSRuntime.InvokeVoidAsync("secureContentLoader.loadContent", GenerateAuthHeaders());
            }
            else
            {
                // Handle error responses
                var errorMessage = response.Error?.Content ?? "Unknown error!";
                _contentItems.Clear();
                _hasAccess = false;

                Logger.LogError("‚ùå Access Denied or Error: {ErrorMessage}", errorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "‚ùå Exception occurred while fetching gated content");
            _isAuthenticated = false;
            _hasAccess = false;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private Dictionary<string, string> GenerateAuthHeaders()
    {
        return new Dictionary<string, string>
        {
            { "X-Visitor-UP", _connectionState?.VisitorAddress ?? string.Empty },
            { "X-Nonce", Guid.NewGuid().ToString() },
            { "X-Signature", "" }, // Replace with actual signature implementation
            { "X-Chain-Id", _connectionState?.ChainId.ToString() ?? string.Empty }
        };
    }
    
    private string GetSecureUrl(string ownerAddress, string area, string fileName)
    {
        // Use the configured base URL as a prefix
        var baseUrl = BackendApiOptions.Value.BaseUrl.TrimEnd('/');
        return $"{baseUrl}/api/content/fetch/{ownerAddress}/{area}/{fileName}";
    }

    [JSInvokable]
    public async Task StateUpdated()
    {
        Console.WriteLine("üîÑ Reacting to connection state updates...");
        await FetchAndVerifyConnectionState();
    }

    [UsedImplicitly(ImplicitUseTargetFlags.Members)]
    public class ConnectionState
    {
        public string? VisitorAddress { get; set; }
        public string? OwnerAddress { get; set; }
        public int? ChainId { get; set; }
    }
}